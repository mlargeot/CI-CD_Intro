name: chocolatine
on: 
  push:
    branches-ignore:
      - ga-ignore-*
  pull_request:
    branches-ignore:
      - ga-ignore-*

env:
  MIRROR_URL: git@github.com:EpitechPromo2027/B-DOP-200-REN-2-1-chocolatine-morgan.largeot.git
  EXECUTABLES: test

jobs:
  check_coding_style:
    name: cs-checker
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Fecthing repository
        uses: actions/checkout@v3
      - name: Run coding style checker
        run: check.sh $(pwd) $(pwd)
      - name: Checking that there are no coding style errors
        run: |
            if [ ! -s "coding-style-reports.log" ]; then
              echo ""
            else
              while IFS=$'\n'; read ERROR
              do
                FILE=$(echo "$ERROR" | cut -d : -f 1)
                LINE=$(echo "$ERROR" | cut -d : -f 2)
                TYPE=$(echo "$ERROR" | cut -d : -f 3)
                ERR=$(echo "$ERROR" | cut -d : -f 4)
                echo "::error file=$FILE,line=$LINE,title=$TYPE coding style error::$ERR" 
              done < "coding-style-reports.log"
              exit 1
            fi

  check_program_compilation:
    name: compilation-checker
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    needs: check_coding_style
    steps:
      - name: Fetching repository
        uses: actions/checkout@v3
      - name: Run program compilation  
        run: make
        timeout-minutes: 2
      - name: Run cleaning of temporary files
        run: make clean
      - name: Checking that the program compiled correctly
        run: |
          for exec in $(echo "${{ env.EXECUTABLES }}" | tr ',' ' ')
          do
            if [ ! -f $exec ]; then
              echo "::error:: Inexistant file: $exec"
              exit 1
            fi
            if [ ! -x $exec ]; then
              echo "::error:: Unable to execute: $exec"
              exit 1
            fi
          done

  run_tests:
    name: tests-runner
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - name: Fetching repository
        uses: actions/checkout@v3
      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    name: mirror_push
    needs: run_tests
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Fetching repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}